const {
    isGiftUsefulKeyboard,
    isAgreeGetMessagesKeyboard,
    mainKeyboard,
} = require('./config/keyboards');
const { giftVideo } = require('./config/videoConfig');

// —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ª—é–±–æ–µ —Å–ª–æ–≤–æ –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
const findWords = (arr, message) => {
    const containsWord = arr.some((word) => message.includes(word));
    return containsWord;
};

// —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç—Ä–æ–∏—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –º–∞—Å—Å–∏–≤–∞
const makeInlineKeyboardFromArr = (arr, fieldName) => {
    const keyboard = [];
    // —Å—Ç—Ä–æ–∏–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    arr.forEach((item) => {
        keyboard.push([
            {
                text: item[fieldName],
                callback_data: item[fieldName], // –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è callback_data
            },
        ]);
    });
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.push([
        {
            text: '–ù–∞–∑–∞–¥ ‚Ü©Ô∏è',
            callback_data: 'abort', // –∏–ª–∏ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è callback_data
        },
    ]);
    return {
        inline_keyboard: keyboard,
    };
};

// —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ª—é–±—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞
const findExpression = (arr, message) => {
    let isContain = false;
    arr.forEach((word) => {
        if (message == word) {
            isContain = true;
            return;
        }
    });
    return isContain;
};

const setTotalClientsInMessage = (stat) => {
    return `${stat.totalClients.number_of_clients}`;
};

const setTotalAgreeClientsInMessage = (stat) => {
    return `<b>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É:</b>\n–°–æ–≥–ª–∞—Å–Ω—ã: ${stat.agreeClients[0].total}\n–ù–µ —Å–æ–≥–ª–∞—Å–Ω—ã: ${stat.agreeClients[1].total}`;
};

const setPeriodRegistrationInMessage = (stat) => {
    return `<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å:</b>\n–í —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ: ${getCurrentMonthData(
        stat.createdPeriod
    )}\n–í –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ: ${getPreviousMonthData(stat.createdPeriod)}`;
};

const setPeriodLastVisitInMessage = (stat) => {
    return `<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ:</b>\n–í —Ç–µ–∫—É—â–µ–º –º–µ—Å—è—Ü–µ: ${getCurrentMonthData(
        stat.lastVisitPeriod
    )}\n–í –ø—Ä–æ—à–ª–æ–º –º–µ—Å—è—Ü–µ: ${getPreviousMonthData(stat.lastVisitPeriod)}`;
};

function getCurrentMonthData(data) {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    const now = new Date();
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ 'YYYY-MM'
    const currentYearMonth = now.toISOString().slice(0, 7); // 'YYYY-MM'
    const filteredData = data.filter((item) => item.year_month === currentYearMonth);
    if (filteredData.length > 0) {
        return filteredData[0].total;
    } else {
        return '0';
    }
}

function getPreviousMonthData(data) {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
    const now = new Date();
    // –£–º–µ–Ω—å—à–∞–µ–º –º–µ—Å—è—Ü –Ω–∞ 1 –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞
    now.setMonth(now.getMonth() - 1);
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ 'YYYY-MM'
    const previousYearMonth = now.toISOString().slice(0, 7); // 'YYYY-MM'

    // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ—à–ª–æ–º—É –º–µ—Å—è—Ü—É
    const filteredData = data.filter((item) => item.year_month === previousYearMonth);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º total –∏–ª–∏ '0', –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if (filteredData.length > 0) {
        return filteredData[0].total;
    } else {
        return '0';
    }
}

const setStatisticByClientsCityInMessage = (stat) => {
    let str = '<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–æ–¥–∞–º:</b>\n';
    for (let i = 0; i < stat.clientsByCities.length; ++i) {
        str = `${str}${stat.clientsByCities[i].city}: ${stat.clientsByCities[i].clients_by_city} —á–µ–ª.\n`;
    }
    return str;
};

async function sendGift(ctx) {
    await ctx.reply('–°–µ–∫—É–Ω–¥–æ—á–∫—É...', { parse_mode: 'HTML' });
    await ctx.replyWithVideo(giftVideo);
    const motivatingMessageTimeout = setTimeout(async () => {
        await ctx.reply('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ø—Ä–æ–±—É–π —ç—Ç–æ—Ç –º–∞–∫–∏—è–∂ —Å–¥–µ–ª–∞—Ç—å —Å–∞–º–∞. –£ —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è!', {
            reply_markup: mainKeyboard,
            parse_mode: 'HTML',
        });
        const sentInstagramTimeout = setTimeout(async () => {
            await ctx.reply(
                `–õ–æ–≤–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Å—Ç—É <a href="https://www.instagram.com/samarinavisage?igsh=MTQ0YWdyZjA2NWd4aQ==">–°–∞–º–∞—Ä–∏–Ω–æ–π –õ–∏–ª–∏–∏</a>. –ó–∞–≥–ª—è–Ω–∏, —É –Ω–µ–µ –º–æ—Ä–µ –∫–ª–∞—Å—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.`,
                { reply_markup: mainKeyboard, parse_mode: 'HTML' }
            );
            if (ctx.session.clientInfo) {
                const isGiftUsefulTimeout = setTimeout(() => {
                    ctx.reply(`${ctx.session.clientInfo.client_name}, —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ø–æ–¥–∞—Ä–æ–∫?`, {
                        reply_markup: isGiftUsefulKeyboard,
                        parse_mode: 'HTML',
                    });
                    clearTimeout(isGiftUsefulTimeout);
                }, 20000);
            }
            clearTimeout(sentInstagramTimeout);
        }, 5000);
        clearTimeout(motivatingMessageTimeout);
    }, 40000);
}

async function requestFeedback(ctx) {
    await ctx.reply(
        '–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã, –µ—Å–ª–∏ —Ç—ã –æ—Å—Ç–∞–≤–∏—à—å –æ—Ç–∑—ã–≤ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ WB. –í –æ—Ç–∑—ã–≤–µ –Ω–∞–ø–∏—à–∏ –∫–∞–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –±—ã–ª –±—ã —Ç–µ–±–µ –ø–æ–ª–µ–∑–µ–Ω!üíñüíñüíñ',
        {
            parse_mode: 'HTML',
        }
    );
    const feedbackTimeout = setTimeout(() => {
        ctx.reply('–ê —Ç–µ–±–µ –±—ã–ª–æ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—à–∏—Ö –Ω–æ–≤–∏–Ω–∫–∞—Ö?', {
            reply_markup: isAgreeGetMessagesKeyboard,
            parse_mode: 'HTML',
        });
        clearTimeout(feedbackTimeout);
    }, 20000);
}

async function sendContentToClient(ctx, video, emoji, introMessage, outroMessage) {
    await ctx.react(emoji);
    await ctx.reply(introMessage, { parse_mode: 'HTML' });
    await ctx.replyWithVideo(video);
    await ctx.reply(outroMessage, { reply_markup: mainKeyboard, parse_mode: 'HTML' });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
module.exports = {
    makeInlineKeyboardFromArr,
    findWords,
    findExpression,
    setTotalClientsInMessage,
    setStatisticByClientsCityInMessage,
    setPeriodRegistrationInMessage,
    setTotalAgreeClientsInMessage,
    setPeriodLastVisitInMessage,
    sendGift,
    requestFeedback,
    sendContentToClient,
};
