const { botToken, admIds } = require('./config/botConfig');
// –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø–∞–ø–∫–∞–º
const {
    idQueryWordsArr,
    greetengsWordsArr,
    commonQuestionArr,
} = require('./controllers/commonPhrases');

const { banWordsArr } = require('./controllers/banWords');

const {
    getGiftKeyboard,
    isGiftUsefulKeyboard,
    isAgreeGetMessagesKeyboard,
    mainKeyboard,
    adminKeyboard,
    returnKeyboard,
} = require('./config/keyboards');

const { video1, video2, video3 } = require('./config/videoConfig');

// –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è —Ñ—É–Ω–∫—Ü–∏–π
const {
    clientVerification,
    findCity,
    addClientToDB,
    addNewCityToDB,
    makeInlineKeyboardFromArr,
    findWords,
    findExpression,
    checkAbortAggreToGetMessages,
    getStatistic,
    setTotalClientsInMessage,
    setStatisticByClientsCityInMessage,
    setPeriodRegistretionInMessage,
    setTotalAgreeClientsInMessage,
} = require('./utilites');

// –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –Ω–∞–º –∫–ª–∞—Å—Å Bot –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ grammy.js, –∞ —Ç–∞–∫–∂–µ –∫–ª–∞—Å—Å—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫ GrammyError –∏ HttpError
const { Bot, GrammyError, Context, session, HttpError } = require('grammy');

// –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å –¥–∏–∞–ª–æ–≥–∞–º–∏
const { conversations, createConversation } = require('@grammyjs/conversations');
// —Å–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –±–æ—Ç–∞
const bot = new Bot(botToken);
// –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–µ–∂–∏–º –±–µ—Å–µ–¥—ã
bot.use(session({ initial: () => ({}) }));
bot.use(conversations());

// –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–µ—Å–µ–¥—É –ø–æ —Å–±–æ—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
bot.use(createConversation(clientIdentify));
bot.api.setMyCommands([
    {
        command: 'start',
        description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞',
    },
]);

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.command('start', async (ctx) => {
    await handleStartCommand(ctx);
});

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
bot.on('message', async (ctx) => {
    await handleIncomingMessage(ctx);
});

bot.on('callback_query:data', async (ctx) => {
    await handleCallbackQuery(ctx);
});

// —Ç–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏–º –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –Ω–æ –æ–Ω –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—ç—Ç–æ–º—É –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –Ω–∞ –∫–æ–º–µ–Ω–¥—É start (–≤—ã—à–µ –¥–æ–±–∞–≤–ª–µ–Ω)
bot.start();

async function handleIncomingMessage(ctx) {
    const message = ctx.message.text.toLowerCase();
    if (message === '—Ç—Ä–æ–π–Ω–∞—è –ø–æ–¥–≤–µ—Å–∫–∞') {
        await sendJewelryContent(
            ctx,
            video1,
            'üëå',
            '–ú–Ω–µ —Ç–æ–∂–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–∞ –±–∏–∂—É—Ç–µ—Ä–∏—è! –ù–µ–º–Ω–æ–∂–∫–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –∏—â—É –¥–ª—è –≤–∞—Å –∫–æ–Ω—Ç–µ–Ω—Ç...',
            '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –û—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –≤–µ—á–µ—Ä–Ω–∏—Ö –Ω–∞—Ä—è–¥–æ–≤!'
        );
    } else if (message === '–∞—Ä–∞–±—Å–∫–∞—è –ø–æ–¥–≤–µ—Å–∫–∞') {
        await sendJewelryContent(
            ctx,
            video2,
            '‚ù§Ô∏è',
            '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä. –£–∂–µ –ø–µ—Ä–µ–¥–∞—é –≤–∞–º –≤–∏–¥–µ–æ...',
            '–ü–æ—á—É–≤—Å—Ç–≤—É–π —Å–µ–±—è –∞—Ä–∞–±—Å–∫–æ–π –ø—Ä–∏–Ω—Ü–µ—Å—Å–æ–π'
        );
    } else if (message === '–∫–æ–ª—å—Ü–æ') {
        await sendJewelryContent(
            ctx,
            video3,
            'üòç',
            '–ö–æ–ª—å—Ü–∞ - —ç—Ç–æ –º–æ—è —Å–ª–∞–±–æ—Å—Ç—å! –°–µ–∫—É–Ω–¥–æ—á–∫—É...',
            '–ö—Ä–∞—Å–∏–≤–æ–µ –∫–æ–ª—å—Ü–æ –±–µ–∑—É—Å–ª–æ–≤–Ω–æ –ø–æ–¥—á–µ—Ä–∫–Ω—ë—Ç –≤–∞—à—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å'
        );
    } else if (findExpression(idQueryWordsArr, message)) {
        await ctx.reply(`–í–∞—à id: ${ctx.from.id}`);
    } else if (findExpression(greetengsWordsArr, message)) {
        await ctx.react('ü§ó');
        await ctx.reply('–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?');
    } else if (findExpression(commonQuestionArr, message)) {
        await ctx.react('üëç');
        await ctx.reply('–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ!');
        await ctx.reply(
            '–ö—Å—Ç–∞—Ç–∏, –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ –ø—Ä–∏–≤–µ–∑—ë–º –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ–ø–æ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π!'
        );
    } else if (findWords(banWordsArr, message)) {
        await ctx.api.deleteMessage(ctx.chat.id, ctx.message.message_id);
        const sentMessage = await ctx.reply('–†—É–≥–∞–µ–º—Å—è?');
        const findBanWordTimeout = setTimeout(() => {
            ctx.api.deleteMessage(ctx.chat.id, sentMessage.message_id);
            clearTimeout(findBanWordTimeout);
        }, 2000);
    } else {
        await ctx.reply(`–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å!`);
    }
    if (ctx.session.isMassMailing) {
        ctx.session.draftMessage = ctx.message.text; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const statObj = await getStatistic();
        await ctx.reply(
            `–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–ò\n–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n--------------\n<b>${
                ctx.session.draftMessage
            }</b>\n--------------\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç: ${setTotalClientsInMessage(
                statObj
            )} –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É?`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'confirmMassMailing' }],
                    ],
                },
                parse_mode: 'HTML',
            }
        );
    }
}

async function sendJewelryContent(ctx, video, emoji, introMessage, outroMessage) {
    await ctx.react(emoji);
    await ctx.reply(introMessage, { parse_mode: 'HTML' });
    await ctx.replyWithVideo(video);
    await ctx.reply(outroMessage, { reply_markup: mainKeyboard, parse_mode: 'HTML' });
}

async function handleStartCommand(ctx) {
    ctx.session.clientInfo = await clientVerification(ctx);
    if (ctx.session.clientInfo) {
        const clientName = ctx.session.clientInfo.client_name;
        if (admIds.includes(ctx.from.id)) {
            await ctx.reply(
                `üëã ${clientName}, –ø—Ä–∏–≤–µ—Ç! –ö–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ üëá`,
                {
                    reply_markup: adminKeyboard,
                    parse_mode: 'HTML',
                }
            );
        } else {
            await ctx.reply(
                `üëã ${clientName}, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å! –†–∞–¥—ã, —á—Ç–æ –≤—ã –∑–∞–≥–ª—è–Ω—É–ª–∏ –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω —é–≤–µ–ª–∏—Ä–Ω–æ–π –±–∏–∂—É—Ç–µ—Ä–∏–∏ By A&K`,
                { parse_mode: 'HTML' }
            );
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫–æ–Ω—Ç–µ–Ω—Çüëá', {
                reply_markup: mainKeyboard,
                parse_mode: 'HTML',
            });
        }
    } else {
        await ctx.reply(
            '–ü—Ä–∏–≤–µ—Ç, –∫—Ä–∞—Å–æ—Ç–∫–∞! –†–∞–¥—ã, —á—Ç–æ —Ç—ã –∑–∞–≥–ª—è–Ω—É–ª–∞ –≤ –º–∞–≥–∞–∑–∏–Ω –º–æ–¥–Ω–æ–π –±–∏–∂—É—Ç–µ—Ä–∏–∏ By A&K.',
            { parse_mode: 'HTML' }
        );
        await ctx.conversation.enter('clientIdentify');
    }
}

async function clientIdentify(conversation, ctx) {
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –≤–æ–ø—Ä–æ—Å–∞ –æ –∏–º–µ–Ω–∏
    await askForName(conversation, ctx);
}

async function handleCallbackQuery(ctx) {
    ctx.session.clientInfo = await clientVerification(ctx);
    const action = ctx.callbackQuery.data;

    try {
        switch (action) {
            case 'getGift':
                await sendGift(ctx);
                break;
            case 'isUseful':
                await requestFeedback(ctx);
                break;
            case 'isNotUseful':
            case 'isNotAgreeGetMessages':
                await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è!üòÉ', { parse_mode: 'HTML' });
                if (action === 'isNotAgreeGetMessages') {
                    await checkAbortAggreToGetMessages(ctx.session.clientInfo.client_tg_id);
                }
                break;
            case 'isAgreeGetMessages':
                await ctx.reply(
                    '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ! –ë—É–¥–µ–º –∏ –¥–∞–ª—å—à–µ —Å—Ç–∞—Ä–∞—Ç—å—Å—è –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!',
                    { parse_mode: 'HTML' }
                );
                break;

            case 'getStatistic':
                await ctx.reply(`–°–µ–∫—É–Ω–¥–æ—á–∫—É...`, {
                    parse_mode: 'HTML',
                });
                const statObj = await getStatistic();
                console.log(statObj);
                if (statObj) {
                    await ctx.reply(
                        `–°–¢–ê–¢–ò–°–¢–ò–ö–ê\n---------------\n–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${setTotalClientsInMessage(
                            statObj
                        )} —á–µ–ª.\n---------------\n${setStatisticByClientsCityInMessage(
                            statObj
                        )}\n${setTotalAgreeClientsInMessage(
                            statObj
                        )}\n\n${setPeriodRegistretionInMessage(statObj)}`,
                        { parse_mode: 'HTML', reply_markup: adminKeyboard }
                    );
                } else {
                    await ctx.reply(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –ø—É—Å—Ç–∞—è!`, {
                        parse_mode: 'HTML',
                        reply_markup: adminKeyboard,
                    });
                }

                break;
            case 'massMailing':
                // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (ctx.session.massMailingMessageId) {
                    await ctx.api.deleteMessage(ctx.chat.id, ctx.session.massMailingMessageId);
                }
                const massMailingMessage = await ctx.reply('–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...', {
                    reply_markup: returnKeyboard,
                });
                ctx.session.massMailingMessageId = massMailingMessage.message_id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                ctx.session.isMassMailing = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
                break;
            case 'adminKeyboard':
                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (ctx.session.massMailingMessageId) {
                    await ctx.api.deleteMessage(ctx.chat.id, ctx.session.massMailingMessageId);
                    ctx.session.massMailingMessageId = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                }
                await ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...', {
                    parse_mode: 'HTML',
                    reply_markup: adminKeyboard,
                });
                break;
            default:
                console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
                break;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        await ctx.answerCallbackQuery({
            text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            show_alert: true,
        });
    } finally {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (ctx.session.massMailingMessageId) {
            try {
                await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
            }
        }
    }
}

async function sendGift(ctx) {
    await ctx.reply('–°–µ–∫—É–Ω–¥–æ—á–∫—É...', { parse_mode: 'HTML' });
    await ctx.replyWithVideo(video1);
    const motivatingMessageTimeout = setTimeout(async () => {
        await ctx.reply('–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ø—Ä–æ–±—É–π —ç—Ç–æ—Ç –º–∞–∫–∏—è–∂ —Å–¥–µ–ª–∞—Ç—å —Å–∞–º–∞. –£ —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è!', {
            reply_markup: mainKeyboard,
            parse_mode: 'HTML',
        });
        const sentInstagramTimeout = setTimeout(async () => {
            await ctx.reply(
                `–õ–æ–≤–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Å—Ç—É <a href="https://www.instagram.com/samarinavisage?igsh=MTQ0YWdyZjA2NWd4aQ==">–°–∞–º–∞—Ä–∏–Ω–æ–π –õ–∏–ª–∏–∏</a>. –ó–∞–≥–ª—è–Ω–∏, —É –Ω–µ–µ –º–æ—Ä–µ –∫–ª–∞—Å—Å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.`,
                { reply_markup: mainKeyboard, parse_mode: 'HTML' }
            );
            if (ctx.session.clientInfo) {
                const isGiftUsefulTimeout = setTimeout(() => {
                    ctx.reply(`${ctx.session.clientInfo.client_name}, —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –ø–æ–¥–∞—Ä–æ–∫?`, {
                        reply_markup: isGiftUsefulKeyboard,
                        parse_mode: 'HTML',
                    });
                    clearTimeout(isGiftUsefulTimeout);
                }, 20000);
            }
            clearTimeout(sentInstagramTimeout);
        }, 5000);
        clearTimeout(motivatingMessageTimeout);
    }, 40000);
}

async function requestFeedback(ctx) {
    await ctx.reply(
        '–ú—ã –±—É–¥–µ–º —Ä–∞–¥—ã, –µ—Å–ª–∏ —Ç—ã –æ—Å—Ç–∞–≤–∏—à—å –æ—Ç–∑—ã–≤ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ WB. –í –æ—Ç–∑—ã–≤–µ –Ω–∞–ø–∏—à–∏ –∫–∞–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç –±—ã–ª –±—ã —Ç–µ–±–µ –ø–æ–ª–µ–∑–µ–Ω!üíñüíñüíñ',
        {
            parse_mode: 'HTML',
        }
    );
    const feedbackTimeout = setTimeout(() => {
        ctx.reply('–ê —Ç–µ–±–µ –±—ã–ª–æ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—à–∏—Ö –Ω–æ–≤–∏–Ω–∫–∞—Ö?', {
            reply_markup: isAgreeGetMessagesKeyboard,
            parse_mode: 'HTML',
        });
        clearTimeout(feedbackTimeout);
    }, 20000);
}

// --------------------------
// —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function askForName(conversation, ctx) {
    await ctx.reply('–ö–∞–∫ —è –º–æ–≥—É –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –ù–∞–ø–∏—à–∏ —Å–≤–æ–µ –∏–º—è...', {
        parse_mode: 'HTML',
    });
    const clientNameObj = await conversation.wait();
    ctx.session.clientName = clientNameObj.update.message.text;
    await askForCity(conversation, ctx);
}

// —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± –∏–º–µ–Ω–∏
async function askForCity(conversation, ctx) {
    await ctx.reply('–ò–∑ –∫–∞–∫–æ–≥–æ —Ç—ã –≥–æ—Ä–æ–¥–∞?', {
        parse_mode: 'HTML',
    });
    const cityObj = await conversation.wait();
    const foundCity = await findCity(cityObj.update.message.text.trim());
    console.log('–û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –ø–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥–∞–º: ', foundCity);

    if (foundCity.length === 1) {
        ctx.session.clientCity = foundCity[0].city_name;
        await addClientToDB(ctx);
        await ctx.reply(
            `${ctx.session.clientName}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏! –î–∞—Ä–∏–º —Ç–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –¢–û–ü-–≤–∏–∑–∞–∂–∏—Å—Ç–∞ –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã!`,
            {
                reply_markup: getGiftKeyboard,
                parse_mode: 'HTML',
            }
        );
    } else if (foundCity.length > 1) {
        await ctx.reply('–£—Ç–æ—á–Ω–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≥–æ—Ä–æ–¥', {
            parse_mode: 'HTML',
            reply_markup: makeInlineKeyboardFromArr(foundCity, 'city_name'),
        });
        const callbackQuery = await conversation.wait();
        if (callbackQuery.update.callback_query) {
            const selectedCity = callbackQuery.update.callback_query.data;

            if (selectedCity === 'abort') {
                await ctx.reply('–î–∞–≤–∞–π –≤–µ—Ä–Ω–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É!');
                await askForName(conversation, ctx); // –°–Ω–æ–≤–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
            } else {
                ctx.session.clientCity = selectedCity; // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –≤ —Å–µ—Å—Å–∏—é
                await addClientToDB(ctx);
                await ctx.reply(
                    `${ctx.session.clientName}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏! –î–∞—Ä–∏–º —Ç–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –¢–û–ü-–≤–∏–∑–∞–∂–∏—Å—Ç–∞ –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã!`,
                    {
                        reply_markup: getGiftKeyboard,
                        parse_mode: 'HTML',
                    }
                );
            }
        }
    } else {
        // –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞—à–µ–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ –ë–î, –∞ –ø–æ—Ç–æ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        ctx.session.clientCity = cityObj.update.message.text.trim();
        await addNewCityToDB(ctx);
        await addClientToDB(ctx);
        await ctx.reply(
            `${ctx.session.clientName}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏! –î–∞—Ä–∏–º —Ç–µ–±–µ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –¢–û–ü-–≤–∏–∑–∞–∂–∏—Å—Ç–∞ –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã!`,
            {
                reply_markup: getGiftKeyboard,
                parse_mode: 'HTML',
            }
        );
    }
}
