require('dotenv').config();

// –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø–∞–ø–∫–∞–º
const fs = require('fs');
const createReadStream = require('fs').createReadStream;

// –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è —Ñ—É–Ω–∫—Ü–∏–π
const {
    clientVerification,
    findCity,
    addClientToDB,
    addNewCityToDB,
    makeInlineKeyboardFromArr,
    findWords,
    findExpression,
    checkAbortAggreToGetMessages,
} = require('./utilites');

// –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –Ω–∞–º –∫–ª–∞—Å—Å Bot –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ grammy.js, –∞ —Ç–∞–∫–∂–µ –∫–ª–∞—Å—Å—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫ GrammyError –∏ HttpError
const {
    Bot,
    GrammyError,
    Context,
    session,
    HttpError,
    Keyboard,
    InlineKeyboard,
    InputFile,
} = require('grammy');

// —Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –±—Ä–∞–Ω–Ω—ã—Ö —Å–ª–æ–≤
const data = fs.readFileSync('./banwords.txt', { encoding: 'utf8' });
const banWordsArr = data.trim().split('\n');

const video1 = new InputFile(
    createReadStream('./video/258091765_–ü–æ–¥–≤–µ—Å–∫–∞_—Ü–µ–ø–æ—á–∫–∏_—Ç—Ä–æ–π–Ω–∞—è_–≤–µ—Ä—Ç–∏–∫.mov')
);
const video2 = new InputFile(
    createReadStream('./video/142304671_–ü–æ–¥–≤–µ—Å–∫–∞_–ª—é–±–æ–≤—å_–Ω–∞_–∞—Ä–∞–±—Å–∫–æ–º_–≤–µ—Ä—Ç–∏–∫.mov')
);
const video3 = new InputFile(createReadStream('./video/–í–∏–¥–µ–æ--online-audio-convert.com.mp4'));

// –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å –¥–∏–∞–ª–æ–≥–∞–º–∏
const { conversations, createConversation } = require('@grammyjs/conversations');

const getGiftKeyboard = new InlineKeyboard().text('üéÅ –ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫', 'getGift').row();
const isGiftUsefulKeyboard = new InlineKeyboard()
    .text('üëç –î–∞', 'isUseful')
    .text('üôÖ‚Äç‚ôÇÔ∏è –ù–µ—Ç', 'isNotUseful');
const isAgreeGetMessagesKeyboard = new InlineKeyboard()
    .text('üëç –ö–æ–Ω–µ—á–Ω–æ', 'isAgreeGetMessages')
    .text('üôÖ‚Äç‚ôÇÔ∏è –õ—É—á—à–µ –Ω–µ –Ω–∞–¥–æ', 'isNotAgreeGetMessages');
const mainKeyboard = new Keyboard()
    .text('–¢—Ä–æ–π–Ω–∞—è –ø–æ–¥–≤–µ—Å–∫–∞')
    .row()
    .text('–ê—Ä–∞–±—Å–∫–∞—è –ø–æ–¥–≤–µ—Å–∫–∞')
    .row()
    .text('–ö–æ–ª—å—Ü–æ')
    .row()
    .resized()
    .oneTime();
const idQueryWordsArr = [
    '–º–æ–π id',
    'id?',
    '–∞–π–¥–∏?',
    '—É –º–µ–Ω—è id',
    '—É –º–µ–Ω—è id?',
    '–∫–∞–∫–æ–π —É –º–µ–Ω—è id',
    '–∫–∞–∫–æ–π —É –º–µ–Ω—è id?',
    '–∫–∞–∫–æ–π —É –º–µ–Ω—è –∞–π–¥–∏',
    '–∫–∞–∫–æ–π —É –º–µ–Ω—è –∞–π–¥–∏?',
    '—Å–∫–∞–∂–∏ id',
    '–ø–æ–¥—Å–∫–∞–∂–∏ id',
    '–ø–æ–¥—Å–∫–∞–∂–∏ –º–æ–π id',
    '–º–æ–π –∞–π–¥–∏',
    '–ø–æ–¥—Å–∫–∞–∂–∏ –∞–π–¥–∏',
    '—É –º–µ–Ω—è –∞–π–¥–∏',
    '—É –º–µ–Ω—è –∞–π–¥–∏?',
    '–ø–æ–¥—Å–∫–∞–∂–∏ –º–æ–π –∞–π–¥–∏',
];
const greetengsWordsArr = [
    '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å',
    '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å!',
    '–¥–æ–±—Ä–æ–≥–æ –¥–Ω—è',
    '–¥–æ–±—Ä–æ–≥–æ –¥–Ω—è!',
    '–ø—Ä–∏–≤–µ—Ç',
    '–∑–¥–∞—Ä–æ–≤–∞',
    '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ',
    '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π',
];
const commonQuestionArr = [
    '–∫–∞–∫ –¥–µ–ª–∞',
    '–∫–∞–∫ –¥–µ–ª–∞?',
    '–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å',
    '–∫–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞',
    '–∫–∞–∫ –ø–æ–∂–∏–≤–∞–µ—à—å?',
    '–∫–∞–∫ —É —Ç–µ–±—è –¥–µ–ª–∞?',
];
const bot = new Bot(process.env.BOT_API_KEY);
// –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–µ–∂–∏–º –±–µ—Å–µ–¥—ã
bot.use(session({ initial: () => ({}) }));
bot.use(conversations());
// –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–µ—Å–µ–¥—É –ø–æ —Å–±–æ—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
bot.use(createConversation(clientIdentify));
bot.api.setMyCommands([
    {
        command: 'start',
        description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞',
    },
]);

bot.command('start', async (ctx) => {
    ctx.session.clientInfo = await clientVerification(ctx);
    // –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —É—á–µ—Ç–æ–º –µ–≥–æ –∏–º–µ–Ω–∏
    if (ctx.session.clientInfo) {
        let clientName = ctx.session.clientInfo.client_name;
        await ctx.reply(
            `üëã ${clientName}, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å! –†–∞–¥—ã, —á—Ç–æ –≤—ã –∑–∞–≥–ª—è–Ω—É–ª–∏ –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω —é–≤–µ–ª–∏—Ä–Ω–æ–π –±–∏–∂—É—Ç–µ—Ä–∏–∏ By A&K`,
            {
                parse_mode: 'HTML',
            }
        );
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∫–æ–Ω—Ç–µ–Ω—Çüëá', {
            reply_markup: mainKeyboard,
            parse_mode: 'HTML',
        });
    } else {
        await ctx.reply(
            'üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –†–∞–¥—ã, —á—Ç–æ –≤—ã –∑–∞–≥–ª—è–Ω—É–ª–∏ –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω —é–≤–µ–ª–∏—Ä–Ω–æ–π –±–∏–∂—É—Ç–µ—Ä–∏–∏ By A&K',
            {
                parse_mode: 'HTML',
            }
        );
        await ctx.conversation.enter('clientIdentify');
    }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫"
bot.on('callback_query:data', async (ctx) => {
    ctx.session.clientInfo = await clientVerification(ctx);

    let timeoutId;
    if (ctx.callbackQuery.data === 'getGift') {
        try {
            await ctx.reply('–°–µ–∫—É–Ω–¥–æ—á–∫—É...', {
                parse_mode: 'HTML',
            });
            await ctx.replyWithVideo(
                new InputFile(
                    createReadStream('./video/258091765_–ü–æ–¥–≤–µ—Å–∫–∞_—Ü–µ–ø–æ—á–∫–∏_—Ç—Ä–æ–π–Ω–∞—è_–≤–µ—Ä—Ç–∏–∫.mov')
                )
            );

            await ctx.reply('–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –í–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!', {
                reply_markup: mainKeyboard,
                parse_mode: 'HTML',
            });

            if (timeoutId) {
                clearTimeout(timeoutId);
            }

            if (ctx.session.clientInfo) {
                timeoutId = setTimeout(async () => {
                    await ctx.reply(
                        `${ctx.session.clientInfo.client_name}, –±—ã–ª –ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —Ç–µ–±—è?`,
                        {
                            reply_markup: isGiftUsefulKeyboard,
                            parse_mode: 'HTML',
                        }
                    );
                }, 200000);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ:', error.message);
            await ctx.answerCallbackQuery({
                text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                show_alert: true,
            });
        }
    } else if (ctx.callbackQuery.data === 'isUseful') {
        if (ctx.session.clientInfo) {
            await ctx.reply(
                `–û—Å—Ç–∞–≤—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–∑—ã–≤ –æ —Ç–æ–º, —á—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –±—ã–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø–æ–ª–µ–∑–µ–Ω.`,
                {
                    parse_mode: 'HTML',
                }
            );
            if (timeoutId) {
                clearTimeout(timeoutId);
            }

            if (ctx.session.clientInfo) {
                timeoutId = setTimeout(async () => {
                    await ctx.reply(
                        `–ê —Ç–µ–±–µ –±—ã–ª–æ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—à–∏—Ö –Ω–æ–≤–∏–Ω–∫–∞—Ö?`,
                        {
                            reply_markup: isAgreeGetMessagesKeyboard,
                            parse_mode: 'HTML',
                        }
                    );
                }, 20000);
            }
        }
    } else if (ctx.callbackQuery.data === 'isNotUseful') {
        if (ctx.session.clientInfo) {
            await ctx.reply(`–ê —Ç–µ–±–µ –±—ã–ª–æ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—à–∏—Ö –Ω–æ–≤–∏–Ω–∫–∞—Ö?`, {
                reply_markup: isAgreeGetMessagesKeyboard,
                parse_mode: 'HTML',
            });
        }
    } else if (ctx.callbackQuery.data === 'isAgreeGetMessages') {
        if (ctx.session.clientInfo) {
            await ctx.react('üëå');
            await ctx.reply(
                `–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ! –ë—É–¥–µ–º –∏ –¥–∞–ª—å—à–µ —Å—Ç–∞—Ä–∞—Ç—å—Å—è –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!`,
                {
                    parse_mode: 'HTML',
                }
            );
        }
    } else if (ctx.callbackQuery.data === 'isNotAgreeGetMessages') {
        if (ctx.session.clientInfo) {
            await ctx.react('üëå');
            await ctx.reply(`–°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è!üòÉ`, {
                parse_mode: 'HTML',
            });
            await checkAbortAggreToGetMessages(ctx.session.clientInfo.client_tg_id);
        }
    }
    // –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
});

// –û—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –Ω–∞—à–ª–∏—Å—å –≤ –∫–æ–¥–µ
bot.on('message', async (ctx) => {
    let timeoutId;
    const message = ctx.message.text;

    if (message == '–¢—Ä–æ–π–Ω–∞—è –ø–æ–¥–≤–µ—Å–∫–∞') {
        try {
            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (timeoutId) {
                clearTimeout(timeoutId);
            }
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 —Å–µ–∫—É–Ω–¥—ã)
            timeoutId = setTimeout(async () => {
                await ctx.react('üëå');
            }, 2000);

            await ctx.reply(
                '–ú–Ω–µ —Ç–æ–∂–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —ç—Ç–∞ –±–∏–∂—É—Ç–µ—Ä–∏—è! –ù–µ–º–Ω–æ–∂–∫–æ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∫–∞ –∏—â—É –¥–ª—è –≤–∞—Å –∫–æ–Ω—Ç–µ–Ω—Ç...',
                {
                    parse_mode: 'HTML',
                }
            );

            await ctx.replyWithVideo(
                new InputFile(
                    createReadStream('./video/258091765_–ü–æ–¥–≤–µ—Å–∫–∞_—Ü–µ–ø–æ—á–∫–∏_—Ç—Ä–æ–π–Ω–∞—è_–≤–µ—Ä—Ç–∏–∫.mov')
                )
            );
            await ctx.reply('–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –û—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –≤–µ—á–µ—Ä–Ω–∏—Ö –Ω–∞—Ä—è–¥–æ–≤!', {
                reply_markup: mainKeyboard,
                parse_mode: 'HTML',
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ:', error.message);
            await ctx.answerCallbackQuery({
                text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                show_alert: true,
            });
        }
    } else if (message == '–ê—Ä–∞–±—Å–∫–∞—è –ø–æ–¥–≤–µ—Å–∫–∞') {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 —Å–µ–∫—É–Ω–¥—ã)
        timeoutId = setTimeout(async () => {
            await ctx.react('‚ù§Ô∏è');
        }, 2000);
        // –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        // await ctx.api.deleteMessage(ctx.chat.id, ctx.message.message_id);
        try {
            await ctx.reply('–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä. –£–∂–µ –ø–µ—Ä–µ–¥–∞—é –≤–∞–º –≤–∏–¥–µ–æ...', {
                parse_mode: 'HTML',
            });
            await ctx.replyWithVideo(
                new InputFile(
                    createReadStream('./video/142304671_–ü–æ–¥–≤–µ—Å–∫–∞_–ª—é–±–æ–≤—å_–Ω–∞_–∞—Ä–∞–±—Å–∫–æ–º_–≤–µ—Ä—Ç–∏–∫.mov')
                )
            );
            await ctx.reply('–ü–æ—á—É–≤—Å—Ç–≤—É–π —Å–µ–±—è –∞—Ä–∞–±—Å–∫–æ–π –ø—Ä–∏–Ω—Ü–µ—Å—Å–æ–π', {
                reply_markup: mainKeyboard,
                parse_mode: 'HTML',
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ:', error.message);
            await ctx.answerCallbackQuery({
                text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                show_alert: true,
            });
        }
    } else if (message == '–ö–æ–ª—å—Ü–æ') {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2 —Å–µ–∫—É–Ω–¥—ã)
        timeoutId = setTimeout(async () => {
            await ctx.react('üòç');
        }, 2000);
        // –µ—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        // await ctx.api.deleteMessage(ctx.chat.id, ctx.message.message_id);

        try {
            await ctx.reply('–ö–æ–ª—å—Ü–∞ - —ç—Ç–æ –º–æ—è —Å–ª–∞–±–æ—Å—Ç—å! –°–µ–∫—É–Ω–¥–æ—á–∫—É...', {
                parse_mode: 'HTML',
            });
            await ctx.replyWithVideo(
                new InputFile(createReadStream('./video/–í–∏–¥–µ–æ--online-audio-convert.com.mp4'))
            );
            await ctx.reply('–ö—Ä–∞—Å–∏–≤–æ–µ –∫–æ–ª—å—Ü–æ –±–µ–∑—É—Å–ª–æ–≤–Ω–æ –ø–æ–¥—á–µ—Ä–∫–Ω—ë—Ç –≤–∞—à—É –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å', {
                reply_markup: mainKeyboard,
                parse_mode: 'HTML',
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ:', error.message);
            await ctx.answerCallbackQuery({
                text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                show_alert: true,
            });
        }
    } else if (findExpression(idQueryWordsArr, message.toLowerCase())) {
        // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å id
        await ctx.reply(`–í–∞—à id: ${ctx.from.id}`, {
            reply_parameters: { message_id: ctx.msg.message_id },
        });
    } else if (findExpression(greetengsWordsArr, message.toLowerCase())) {
        await ctx.react('ü§ó');
        await ctx.reply('–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?', {
            reply_parameters: { message_id: ctx.msg.message_id },
        });
    } else if (findExpression(commonQuestionArr, message.toLowerCase())) {
        await ctx.react('üëç');
        await ctx.reply('–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ!', {
            reply_parameters: { message_id: ctx.msg.message_id },
        });
        await ctx.reply(
            '–ö—Å—Ç–∞—Ç–∏, –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ –ø—Ä–∏–≤–µ–∑—ë–º –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç–æ–ø–æ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π!'
        );
    } else if (findWords(banWordsArr, message.toLowerCase())) {
        await ctx.api.deleteMessage(ctx.chat.id, ctx.message.message_id);
        const sentMessage = await ctx.reply('–†—É–≥–∞–µ–º—Å—è?');
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (timeoutId) {
            clearTimeout(timeoutId);
        }
        timeoutId = setTimeout(async () => {
            await ctx.api.deleteMessage(ctx.chat.id, sentMessage.message_id);
        }, 2000);
    }

    // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    else {
        await ctx.reply(`–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å!`);
    }
});

async function clientIdentify(conversation, ctx) {
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –≤–æ–ø—Ä–æ—Å–∞ –æ –∏–º–µ–Ω–∏
    await askForName(conversation, ctx);
}

// —Ç–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏–º –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –Ω–æ –æ–Ω –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—ç—Ç–æ–º—É –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –Ω–∞ –∫–æ–º–µ–Ω–¥—É start (–≤—ã—à–µ –¥–æ–±–∞–≤–ª–µ–Ω)
bot.start();

// --------------------------
// —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function askForName(conversation, ctx) {
    await ctx.reply('–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è...', {
        parse_mode: 'HTML',
    });
    const clientNameObj = await conversation.wait();
    ctx.session.clientName = clientNameObj.update.message.text;
    await askForCity(conversation, ctx);
}

// —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± –∏–º–µ–Ω–∏
async function askForCity(conversation, ctx) {
    await ctx.reply('–ê –∏–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?', {
        parse_mode: 'HTML',
    });
    const cityObj = await conversation.wait();
    const foundCity = await findCity(cityObj.update.message.text.trim());
    console.log('–û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –ø–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥–∞–º: ', foundCity);

    if (foundCity.length === 1) {
        ctx.session.clientCity = foundCity[0].city_name;
        await addClientToDB(ctx);
        await ctx.reply(
            `${ctx.session.clientName}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! –î–∞—Ä–∏–º –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –≤–µ–¥—É—â–µ–≥–æ –≤–∏–∑–∞–∂–∏—Å—Ç–∞ –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã!`,
            {
                reply_markup: getGiftKeyboard,
                parse_mode: 'HTML',
            }
        );
    } else if (foundCity.length > 1) {
        await ctx.reply('–£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≥–æ—Ä–æ–¥', {
            parse_mode: 'HTML',
            reply_markup: makeInlineKeyboardFromArr(foundCity, 'city_name'),
        });
        const callbackQuery = await conversation.wait();
        if (callbackQuery.update.callback_query) {
            const selectedCity = callbackQuery.update.callback_query.data;

            if (selectedCity === 'abort') {
                await ctx.reply('–î–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É!');
                await askForName(conversation, ctx); // –°–Ω–æ–≤–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
            } else {
                ctx.session.clientCity = selectedCity; // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –≤ —Å–µ—Å—Å–∏—é
                await addClientToDB(ctx);
                await ctx.reply(
                    `${ctx.session.clientName}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! –î–∞—Ä–∏–º –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –≤–µ–¥—É—â–µ–≥–æ –≤–∏–∑–∞–∂–∏—Å—Ç–∞ –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã!`,
                    {
                        reply_markup: getGiftKeyboard,
                        parse_mode: 'HTML',
                    }
                );
            }
        }
    } else {
        // –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞—à–µ–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ –ë–î, –∞ –ø–æ—Ç–æ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        ctx.session.clientCity = cityObj.update.message.text.trim();
        await addNewCityToDB(ctx);
        await addClientToDB(ctx);
        await ctx.reply(
            `${ctx.session.clientName}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! –î–∞—Ä–∏–º –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –≤–µ–¥—É—â–µ–≥–æ –≤–∏–∑–∞–∂–∏—Å—Ç–∞ –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã!`,
            {
                reply_markup: getGiftKeyboard,
                parse_mode: 'HTML',
            }
        );
    }
}
