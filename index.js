require('dotenv').config();

// –ø–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø–∞–ø–∫–∞–º
const fs = require('fs');

// –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è —Ñ—É–Ω–∫—Ü–∏–π
const {
    clientVerification,
    findCity,
    addClientToDB,
    addNewCityToDB,
    makeInlineKeyboardFromArr,
} = require('./utilites');

// –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –Ω–∞–º –∫–ª–∞—Å—Å Bot –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ grammy.js, –∞ —Ç–∞–∫–∂–µ –∫–ª–∞—Å—Å—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫ GrammyError –∏ HttpError
const {
    Bot,
    GrammyError,
    Context,
    session,
    HttpError,
    Keyboard,
    InlineKeyboard,
} = require('grammy');

// –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å –¥–∏–∞–ª–æ–≥–∞–º–∏
const { conversations, createConversation } = require('@grammyjs/conversations');

const getGiftKeyboard = new InlineKeyboard().text('üéÅ –ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫', 'getGift').row();

const bot = new Bot(process.env.BOT_API_KEY);
// –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–µ–∂–∏–º –±–µ—Å–µ–¥—ã
bot.use(session({ initial: () => ({}) }));
bot.use(conversations());
// –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–µ—Å–µ–¥—É –ø–æ —Å–±–æ—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
bot.use(createConversation(clientIdentify));
bot.api.setMyCommands([
    {
        command: 'start',
        description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞',
    },
]);
bot.command('start', async (ctx) => {
    ctx.session.clientInfo = await clientVerification(ctx);
    // –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å —É—á–µ—Ç–æ–º –µ–≥–æ –∏–º–µ–Ω–∏
    if (ctx.session.clientInfo) {
        let clientName = ctx.session.clientInfo.client_name;
        ctx.reply(
            `üëã ${clientName}, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å! –†–∞–¥—ã, —á—Ç–æ –≤—ã –∑–∞–≥–ª—è–Ω—É–ª–∏ –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω —é–≤–µ–ª–∏—Ä–Ω–æ–π –±–∏–∂—É—Ç–µ—Ä–∏–∏ By A&K`,
            {
                // reply_markup: mainKeyboard,
                parse_mode: 'HTML',
            }
        );
    } else {
        await ctx.reply(
            'üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å! –†–∞–¥—ã, —á—Ç–æ –≤—ã –∑–∞–≥–ª—è–Ω—É–ª–∏ –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω —é–≤–µ–ª–∏—Ä–Ω–æ–π –±–∏–∂—É—Ç–µ—Ä–∏–∏ By A&K',
            {
                parse_mode: 'HTML',
            }
        );
        await ctx.conversation.enter('clientIdentify');
    }
});
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫"
bot.on('callback_query:data', async (ctx) => {
    if (ctx.callbackQuery.data === 'getGift') {
        const videoPath = './video/258091765.mov';
        // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        if (!fs.existsSync(videoPath)) {
            console.error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', videoPath);
            return;
        } else {
            console.log('–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –ø–æ—Ä—è–¥–∫–µ');
        }

        try {
            await ctx.replyWithVideo({ source: fs.createReadStream(videoPath) });
            await ctx.answerCallbackQuery({
                text: '–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
                show_alert: true,
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ:', error.message);
            await ctx.answerCallbackQuery({
                text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                show_alert: true,
            });
        }
    }
});

async function clientIdentify(conversation, ctx) {
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –≤–æ–ø—Ä–æ—Å–∞ –æ –∏–º–µ–Ω–∏
    await askForName(conversation, ctx);
}

// —Ç–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏–º –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –Ω–æ –æ–Ω –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—ç—Ç–æ–º—É –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –Ω–∞ –∫–æ–º–µ–Ω–¥—É start (–≤—ã—à–µ –¥–æ–±–∞–≤–ª–µ–Ω)
bot.start();

// --------------------------
// —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function askForName(conversation, ctx) {
    await ctx.reply('–ö–∞–∫ —è –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è...', {
        parse_mode: 'HTML',
    });
    const clientNameObj = await conversation.wait();
    ctx.session.clientName = clientNameObj.update.message.text;

    await askForCity(conversation, ctx);
}

// —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± –∏–º–µ–Ω–∏
async function askForCity(conversation, ctx) {
    await ctx.reply('–ê –∏–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?', {
        parse_mode: 'HTML',
    });
    const cityObj = await conversation.wait();
    const foundCity = await findCity(cityObj.update.message.text.trim());
    console.log('–û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –ø–æ–∏—Å–∫ –ø–æ –≥–æ—Ä–æ–¥–∞–º: ', foundCity);

    if (foundCity.length === 1) {
        ctx.session.clientCity = foundCity[0].city_name;
        await addClientToDB(ctx);
        await ctx.reply(
            `${ctx.session.clientName}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! –î–∞—Ä–∏–º –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –≤–µ–¥—É—â–µ–≥–æ –≤–∏–∑–∞–∂–∏—Å—Ç–∞ –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã!`,
            {
                reply_markup: getGiftKeyboard,
                parse_mode: 'HTML',
            }
        );
    } else if (foundCity.length > 1) {
        await ctx.reply('–£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≥–æ—Ä–æ–¥', {
            parse_mode: 'HTML',
            reply_markup: makeInlineKeyboardFromArr(foundCity, 'city_name'),
        });
        const callbackQuery = await conversation.wait();
        if (callbackQuery.update.callback_query) {
            const selectedCity = callbackQuery.update.callback_query.data;

            if (selectedCity === 'abort') {
                await ctx.reply('–î–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É!');
                await askForName(conversation, ctx); // –°–Ω–æ–≤–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
            } else {
                ctx.session.clientCity = selectedCity; // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –≤ —Å–µ—Å—Å–∏—é
                await addClientToDB(ctx);
                await ctx.reply(
                    `${ctx.session.clientName}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! –î–∞—Ä–∏–º –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –≤–µ–¥—É—â–µ–≥–æ –≤–∏–∑–∞–∂–∏—Å—Ç–∞ –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã!`,
                    {
                        reply_markup: getGiftKeyboard,
                        parse_mode: 'HTML',
                    }
                );
            }
        }
    } else {
        // –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞—à–µ–ª—Å—è –≤ —Å–ø–∏—Å–∫–µ, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥ –≤ –ë–î, –∞ –ø–æ—Ç–æ–º –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        ctx.session.clientCity = cityObj.update.message.text.trim();
        await addNewCityToDB(ctx);
        await addClientToDB(ctx);
        await ctx.reply(
            `${ctx.session.clientName}, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏! –î–∞—Ä–∏–º –≤–∞–º –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –≤–µ–¥—É—â–µ–≥–æ –≤–∏–∑–∞–∂–∏—Å—Ç–∞ –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã!`,
            {
                reply_markup: getGiftKeyboard,
                parse_mode: 'HTML',
            }
        );
    }
}
