const { botToken, admIds } = require('./config/botConfig');

const { Unit_1_Sculptor, Unit_2_Rumyana, Unit_3_Makeup_lips } = require('./config/videoConfig');

const {
    unitMessages,
    commonMessages,
    banMessages,
    massMailingMessages,
    idQueryWordsArr,
    greetingsWordsArr,
    commonQuestionArr,
} = require('./controllers/messages');

const { banWordsArr } = require('./controllers/banWords');

const {
    mainKeyboard,
    adminKeyboard,
    returnKeyboard,
    confirmMassMailingKeyboard,
} = require('./config/keyboards');
// –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è —Ñ—É–Ω–∫—Ü–∏–π
const {
    clientVerification,
    checkAbortAggreToGetMessages,
    getStatistic,
    updateClientLastVisit,
} = require('./controllers/operationsWithDB');

const { startMassmailing } = require('./handlers/massMailing');

// –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è —Ñ—É–Ω–∫—Ü–∏–π
const {
    setTotalClientsInMessage,
    setStatisticByClientsCityInMessage,
    setPeriodRegistrationInMessage,
    setTotalAgreeClientsInMessage,
    setPeriodLastVisitInMessage,
    sendGift,
    requestFeedback,
    findExpression,
    findWords,
    sendContentToClient,
    askForName,
    setOnlyAgreeClientsInMessage,
} = require('./utilites');

// –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –Ω–∞–º –∫–ª–∞—Å—Å Bot –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ grammy.js, –∞ —Ç–∞–∫–∂–µ –∫–ª–∞—Å—Å—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫ GrammyError –∏ HttpError
const { Bot, GrammyError, session, HttpError } = require('grammy');

// –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å –¥–∏–∞–ª–æ–≥–∞–º–∏
const { conversations, createConversation } = require('@grammyjs/conversations');
// —Å–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å –±–æ—Ç–∞
const bot = new Bot(botToken);
// –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–µ–∂–∏–º –±–µ—Å–µ–¥—ã
bot.use(session({ initial: () => ({}) }));
bot.use(conversations());
// –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–µ—Å–µ–¥—É –ø–æ —Å–±–æ—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
bot.use(createConversation(clientIdentify));

bot.api.setMyCommands([
    {
        command: 'start',
        description: '–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞',
    },
]);

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.command('start', async (ctx) => {
    await handleStartCommand(ctx);
});

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
bot.on('message', async (ctx) => {
    await handleIncomingMessage(ctx);
});

bot.on('callback_query', async (ctx) => {
    await handleCallbackQuery(ctx);
});

// —Ç–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏–º –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –Ω–æ –æ–Ω –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ—ç—Ç–æ–º—É –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –Ω–∞ –∫–æ–º–µ–Ω–¥—É start (–≤—ã—à–µ –¥–æ–±–∞–≤–ª–µ–Ω)
bot.start();

async function handleStartCommand(ctx) {
    ctx.session.clientInfo = await clientVerification(ctx);
    if (ctx.session.clientInfo) {
        const clientName = ctx.session.clientInfo.client_name;
        if (admIds.includes(ctx.from.id)) {
            await updateClientLastVisit(ctx);
            await ctx.reply(
                `üëã ${clientName}, –ø—Ä–∏–≤–µ—Ç! –ö–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±–æ—Ç–∞ —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ üëá`,
                {
                    reply_markup: adminKeyboard,
                    parse_mode: 'HTML',
                }
            );
        } else {
            await updateClientLastVisit(ctx);
            await ctx.reply(
                `üëã ${clientName}, –¥–æ–±—Ä—ã–π –¥–µ–Ω—å! –†–∞–¥—ã, —á—Ç–æ —Ç—ã –∑–∞–≥–ª—è–Ω—É–ª–∞ –≤ –Ω–∞—à –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã–π –∫–ª—É–± –æ—Ç –±—Ä–µ–Ω–¥–∞ —é–≤–µ–ª–∏—Ä–Ω–æ–π –±–∏–∂—É—Ç–µ—Ä–∏–∏ By A&K`,
                { parse_mode: 'HTML' }
            );
            await ctx.reply('–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —É—Ä–æ–∫üëá', {
                reply_markup: mainKeyboard,
                parse_mode: 'HTML',
            });
        }
    } else {
        await updateClientLastVisit(ctx);
        await ctx.reply(
            '–ü—Ä–∏–≤–µ—Ç, –∫—Ä–∞—Å–æ—Ç–∫–∞! –†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–µ–±—è –≤ –∫–ª—É–±–µ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç –±—Ä–µ–Ω–¥–∞ —é–≤–µ–ª–∏—Ä–Ω–æ–π –±–∏–∂—É—Ç–µ—Ä–∏–∏ By A&K‚ù§Ô∏è',
            { parse_mode: 'HTML' }
        );
        await ctx.conversation.enter('clientIdentify');
    }
}

async function clientIdentify(conversation, ctx) {
    // –ù–∞—á–∏–Ω–∞–µ–º —Å –≤–æ–ø—Ä–æ—Å–∞ –æ –∏–º–µ–Ω–∏
    await askForName(conversation, ctx);
}

async function handleCallbackQuery(ctx) {
    ctx.session.clientInfo = await clientVerification(ctx);
    const action = ctx.callbackQuery.data;

    try {
        switch (action) {
            case 'getGift':
                await sendGift(ctx);
                break;
            case 'isUseful':
                await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
                await requestFeedback(ctx);
                break;
            case 'isNotUseful':
            case 'isNotAgreeGetMessages':
                await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
                await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è!üòÉ', { parse_mode: 'HTML' });
                if (action === 'isNotAgreeGetMessages') {
                    await checkAbortAggreToGetMessages(ctx.session.clientInfo.client_tg_id);
                }
                break;
            case 'isAgreeGetMessages':
                await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
                await ctx.reply(
                    '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ! –ë—É–¥–µ–º –∏ –¥–∞–ª—å—à–µ —Å—Ç–∞—Ä–∞—Ç—å—Å—è –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!',
                    { parse_mode: 'HTML', reply_markup: mainKeyboard }
                );
                break;

            case 'getStatistic':
                await ctx.reply(`–°–µ–∫—É–Ω–¥–æ—á–∫—É...`, {
                    parse_mode: 'HTML',
                });
                const statObj = await getStatistic();
                console.log(statObj);
                if (statObj) {
                    await ctx.reply(
                        `–°–¢–ê–¢–ò–°–¢–ò–ö–ê\n---------------\n–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${setTotalClientsInMessage(
                            statObj
                        )} —á–µ–ª.\n---------------\n${setStatisticByClientsCityInMessage(
                            statObj
                        )}\n${setTotalAgreeClientsInMessage(
                            statObj
                        )}\n\n${setPeriodRegistrationInMessage(
                            statObj
                        )}\n\n${setPeriodLastVisitInMessage(statObj)}`,
                        { parse_mode: 'HTML', reply_markup: adminKeyboard }
                    );
                } else {
                    await ctx.reply(`–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –ø—É—Å—Ç–∞—è!`, {
                        parse_mode: 'HTML',
                        reply_markup: adminKeyboard,
                    });
                }

                break;
            case 'massMailing':
                // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (ctx.session.massMailingMessageId) {
                    await ctx.api.deleteMessage(ctx.chat.id, ctx.session.massMailingMessageId);
                }
                const massMailingMessage = await ctx.reply('–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...', {
                    reply_markup: returnKeyboard,
                });
                ctx.session.massMailingMessageId = massMailingMessage.message_id; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
                ctx.session.isMassMailing = true; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
                break;
            case 'adminKeyboard':
                // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (ctx.session.massMailingMessageId) {
                    await ctx.api.deleteMessage(ctx.chat.id, ctx.session.massMailingMessageId);
                    ctx.session.massMailingMessageId = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                }
                await ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...', {
                    parse_mode: 'HTML',
                    reply_markup: adminKeyboard,
                });
                break;
            case 'confirmMassMailing':
                startMassmailing(bot, ctx);
                ctx.session.attachment = null;
                break;
            case 'stopMassMailing':
                ctx.session.isMassMailing = false; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                console.log(
                    '–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –§–ª–∞–≥: ',
                    ctx.session.isMassMailing
                ); // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–ª–∞–≥
                await ctx.reply('–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');
                // –ü—Ä–æ–±—É–µ–º –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                await ctx.reply('–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', {
                    reply_markup: adminKeyboard,
                    parse_mode: 'HTML',
                });
                break;
            default:
                console.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
                break;
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –∑–∞–ø—Ä–æ—Å–∞:', error.message);
        await ctx.answerCallbackQuery({
            text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
            show_alert: true,
        });
    } finally {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if (ctx.session.massMailingMessageId) {
            try {
                await ctx.editMessageReplyMarkup({ inline_keyboard: [] });
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
            }
        }
    }
}

async function handleIncomingMessage(ctx) {
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≤ –∫–∞–∫–æ–π —Ñ–æ—Ä–º–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = (ctx.message.text || ctx.message.caption || '').toLowerCase();

    if (message === '—É—Ä–æ–∫ 1. —Å–∫—É–ª—å–ø—Ç–æ—Ä') {
        await sendContentToClient(
            ctx,
            Unit_1_Sculptor,
            unitMessages.unit1.reaction,
            unitMessages.unit1.loadingText,
            unitMessages.unit1.successText,
            unitMessages.unit1.promotionText
        );
    } else if (message === '—É—Ä–æ–∫ 2. —Ä—É–º—è–Ω–∞') {
        await sendContentToClient(
            ctx,
            Unit_2_Rumyana,
            unitMessages.unit2.reaction,
            unitMessages.unit2.loadingText,
            unitMessages.unit2.successText,
            unitMessages.unit2.promotionText
        );
    } else if (message === '—É—Ä–æ–∫ 3. –º–∞–∫–∏—è–∂ –≥—É–±') {
        await sendContentToClient(
            ctx,
            Unit_3_Makeup_lips,
            unitMessages.unit3.reaction,
            unitMessages.unit3.loadingText,
            unitMessages.unit3.successText,
            unitMessages.unit3.promotionText
        );
    } else if (findExpression(idQueryWordsArr, message)) {
        await ctx.reply(`–í–∞—à id: ${ctx.from.id}`);
    } else if (findExpression(greetingsWordsArr, message)) {
        await ctx.react(commonMessages.greetings.reaction);
        await ctx.reply(commonMessages.greetings.reply);
    } else if (findExpression(commonQuestionArr, message)) {
        await ctx.react(commonMessages.commonQuestion.reaction);
        await ctx.reply(commonMessages.commonQuestion.reply);
        await ctx.reply(commonMessages.commonQuestion.postReply);
    } else if (findWords(banWordsArr, message)) {
        await ctx.api.deleteMessage(ctx.chat.id, ctx.message.message_id);
        const sentMessage = await ctx.reply(banMessages.warning);
        const findBanWordTimeout = setTimeout(() => {
            ctx.api.deleteMessage(ctx.chat.id, sentMessage.message_id);
            clearTimeout(findBanWordTimeout);
        }, banMessages.delay);
    } else if (ctx.session.isMassMailing) {
        // –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –µ—Å–ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ –∏–ª–∏ –≤–∏–¥–æ—Å—É, —Ç–æ —Ç–µ–∫—Å—Ç –≤–ª–æ–∂–µ–Ω–∏—è
        ctx.session.draftMessage = ctx.message.text ? ctx.message.text : ctx.message.caption;
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –æ–¥–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–µ
        if (ctx.session.attachment) {
            await ctx.reply(massMailingMessages.singleAttachmentOnly);
            return; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –µ—Å–ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–ª–æ–∂–µ–Ω–∏–π
        if (ctx.message.photo) {
            ctx.session.attachment = { type: 'photo', file_id: ctx.message.photo[0].file_id };
        } else if (ctx.message.document) {
            ctx.session.attachment = { type: 'document', file_id: ctx.message.document.file_id };
        } else if (ctx.message.video) {
            ctx.session.attachment = { type: 'video', file_id: ctx.message.video.file_id };
        } else if (ctx.message.audio) {
            ctx.session.attachment = { type: 'audio', file_id: ctx.message.audio.file_id };
        } else if (ctx.message.voice) {
            ctx.session.attachment = { type: 'voice', file_id: ctx.message.voice.file_id };
        } else if (ctx.message.sticker) {
            ctx.session.attachment = { type: 'sticker', file_id: ctx.message.sticker.file_id };
        }

        const statObj = await getStatistic();
        await ctx.reply(
            `–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–ê–°–°–´–õ–ö–ò\n–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n--------------\n<b>${
                ctx.session.draftMessage
                    ? ctx.session.draftMessage
                    : '(–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–ª–æ–∂–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞)'
            }</b>\n--------------\n–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç: ${setOnlyAgreeClientsInMessage(
                statObj
            )} –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É?`,
            {
                reply_markup: confirmMassMailingKeyboard,
                parse_mode: 'HTML',
            }
        );
    } else {
        await ctx.reply(`–ù–µ –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å!`);
    }
}
